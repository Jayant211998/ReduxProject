{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { uiActions } from \"./ui-slice\";\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0\n  },\n  reducers: {\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.length > 0 && state.items.find(item => item.id === newItem.id);\n      state.totalQuantity++;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title\n        });\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find(item => item.id === id);\n      state.totalQuantity--;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter(item => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    }\n  }\n});\nexport const sendCartData = cart => {\n  return async dispatch => {\n    dispatch(uiActions.showNotification({\n      status: 'pending',\n      title: 'Sending...',\n      message: 'Sending cart data'\n    }));\n    const sendCartDate = async () => {\n      const response = await fetch('https://reduxcart-dc195-default-rtdb.firebaseio.com/cart.json', {\n        method: \"PUT\",\n        body: JSON.stringify(cart)\n      });\n      if (!response.ok) {\n        dispatch(uiActions.showNotification({\n          status: 'error',\n          title: 'Error',\n          message: 'Sending data'\n        }));\n      }\n    };\n    try {\n      await sendCartDate();\n      dispatch(uiActions.showNotification({\n        status: 'success',\n        title: 'Success!',\n        message: 'Cart data sent successfully'\n      }));\n    } catch (err) {\n      dispatch(uiActions.showNotification({\n        status: 'error',\n        title: 'Error',\n        message: err.message\n      }));\n    }\n  };\n};\nexport const cartAction = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","uiActions","cartSlice","name","initialState","items","totalQuantity","reducers","addItemToCart","state","action","newItem","payload","existingItem","length","find","item","id","push","price","quantity","totalPrice","title","removeItemFromCart","filter","sendCartData","cart","dispatch","showNotification","status","message","sendCartDate","response","fetch","method","body","JSON","stringify","ok","err","cartAction","actions"],"sources":["D:/Projects/Projects/redux-project/01-starting-project/src/store/cart-slice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { uiActions } from \"./ui-slice\";\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {items: [], totalQuantity: 0},\r\n    reducers:{\r\n        addItemToCart( state, action ){\r\n            const newItem = action.payload;\r\n            const existingItem = state.items.length > 0 && state.items.find((item) => item.id === newItem.id);\r\n            state.totalQuantity++;\r\n            if(!existingItem){\r\n                state.items.push({\r\n                    id: newItem.id,\r\n                    price: newItem.price,\r\n                    quantity: 1,\r\n                    totalPrice: newItem.price,\r\n                    name: newItem.title\r\n                });\r\n            } else {\r\n                    existingItem.quantity++;\r\n                    existingItem.totalPrice = existingItem.totalPrice + existingItem.price;\r\n            }\r\n        },\r\n        removeItemFromCart(state, action){\r\n            const id = action.payload;\r\n            const existingItem = state.items.find(item => item.id === id);\r\n            state.totalQuantity--;\r\n            if(existingItem.quantity === 1){\r\n                state.items = state.items.filter(item => item.id !== id)\r\n            }else{\r\n                existingItem.quantity--;\r\n                existingItem.totalPrice = existingItem.totalPrice - existingItem.price\r\n            }\r\n\r\n        }\r\n    }\r\n});\r\n\r\nexport const sendCartData = (cart) => {\r\n    return async(dispatch) => {\r\n        dispatch(\r\n            uiActions.showNotification({\r\n              status: 'pending',\r\n              title: 'Sending...',\r\n              message: 'Sending cart data',\r\n            })\r\n          );\r\n        const sendCartDate = async() => {\r\n            const response = await fetch('https://reduxcart-dc195-default-rtdb.firebaseio.com/cart.json',{\r\n              method: \"PUT\",\r\n              body: JSON.stringify(cart),\r\n            });\r\n            if(!response.ok){\r\n              dispatch(\r\n                uiActions.showNotification({\r\n                  status: 'error',\r\n                  title: 'Error',\r\n                  message: 'Sending data',\r\n                })\r\n              );     \r\n            }\r\n        };\r\n        try{\r\n           await sendCartDate();           \r\n           dispatch(\r\n            uiActions.showNotification({\r\n              status: 'success',\r\n              title: 'Success!',\r\n              message: 'Cart data sent successfully',\r\n            })\r\n          );\r\n        }catch(err){\r\n            dispatch(\r\n                uiActions.showNotification({\r\n                  status: 'error',\r\n                  title: 'Error',\r\n                  message: err.message,\r\n                })\r\n              );\r\n        }  \r\n    }\r\n}\r\n\r\nexport const cartAction = cartSlice.actions;\r\n\r\nexport default cartSlice;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}